DECLARE
	--declare variables and assign their values
	lv_first VARCHAR2(1);
	lv_second VARCHAR2(2) := 'AP';
BEGIN
	/*assign the value of the second variable to the first 
	variable to create a run-time error*/
	lv_first := lv_second;
--we catch the exception with the exception block
EXCEPTION
	WHEN OTHERS THEN
		--if the exception is thrown then it will print this message.
		dbms_output.put_line('The second variable doesn't fit into the first variable');
END;
/

DECLARE
	--declare variables and assign their values
	lv_first VARCHAR2(1) := 'A';
	--declare user-defined exception
	excep EXCEPTION;
	/*map exception to an error number 
	(error number must be between -20000 and -20999)*/
	PRAGMA(excep, -20003);
BEGIN
	IF lv_first = 'A' THEN
	--we raise the exception
	RAISE_APPLICATION_ERROR(-20003, '');
	END IF;
	--we catch our exception by naming our exception
EXCEPTION
	WHEN excep THEN
	dbms_output.put_line(SQLERRM);
END;

--ERROR STACK, first we are going to create some procedures
CREATE OR REPLACE PROCEDURE kiwi IS
	--declare variables and assign their values
	lv_first VARCHAR2(1);
	lv_second VARCHAR2(2) := 'AP';
BEGIN
	--create an error by assigning the second variable to the first
	lv_first := lv_second;
	--when the exception is not caught it is sent out of the block
END;
/

CREATE OR REPLACE PROCEDURE pine IS
BEGIN
	--call the kiwi procedure
	kiwi();
END pine;
/
--lets call our procedures
DECLARE
	--variables to help understand the error stack
	lv_length NUMBER;
	lv_counter NUMBER := 0;
	lv_begin NUMBER := 1;
	lv_end NUMBER;
	lv_index NUMBER := 0;
	lv_trace VARCHAR2(2000);
BEGIN
	--lets call the pine procedure
	pine();
EXCEPTION
	WHEN others THEN
		--the for loop must be in reverse
		FOR i IN REVERSE 1..UTL_CALL_STACK.BACKTRACE_DEPTH LOOP
			--check if the trace depth is the same as the error depth
			IF i = utl_call_stack.error_depth THEN
				lv_trace := dbms_utility.format_error_backtrace;
				--count the lines
				lv_length := REGEXP_COUNT(lv_trace, CHR(10),1);
				/*while the counter is less than the number of error lines
				do this*/
				WHILE (lv_counter < lv_length) LOOP
					lv_counter := lv_counter + 1;
					
					--get the next line
					lv_end := REGEXP_INSTR(lv_trace, CHR(10), lv_begin,1);
					--cut out substring from trace
					dbms_output.put_line(SUBSTR(lv_trace, lv_begin, lv_end - lv_begin));
					
					lv_begin := lv_end + 1;
				END LOOP;
			END IF;
		END LOOP;
END;
/
					